import java.io.*;
import java.util.*;

class readings implements Comparable<readings> {
	int lvl, fq;
	public readings(int lvl) {
		this.lvl = lvl;
		int fq = 0;
	}
	public int compareTo(readings other) {
		if (other==null || this==null) {
			return 1;
		}
		if (other.fq > fq) {
			return 1;
		}
		else if (other.fq==fq) {
			if (other.lvl>lvl) {
				return 1;
			}
			return -1;
		}
			return -1;
	}
}
public class AcdicLvl {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	public static void main(String[] args) throws IOException {
		st = new StringTokenizer(br.readLine());
		int N = nextInt();
		readings[] list = new readings[1001];
		list[0] = new readings(0);
		for (int i=1; i<1001; i++) {
			list[i] = new readings(i);
		}
		for (int i=0; i<N; i++) {
			int cmd = nextInt();
			list[cmd].fq++;
		}
		Arrays.sort(list);
		int maxfq = list[0].fq;
		if (list[1].fq==maxfq) {
			for (int i=0; i<1001; i++) {
				if (list[i].fq!=maxfq) {
					System.out.println(Math.abs(list[0].lvl-list[i-1].lvl));
					break;
				}
			}
		}
		if (list[1].fq!=maxfq) {
			int minfq = list[1].fq;
			int maxlvl = list[1].lvl;
			for (int i=1; i<1001; i++) {
				if (list[i].fq!=minfq) {
					int minlvl = list[i-1].lvl;
					System.out.println(Math.max(Math.abs(list[0].lvl-maxlvl), Math.abs(list[0].lvl-minlvl)));
					break;
				}
			}
		}
	}
	static String next() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
		st = new StringTokenizer(br.readLine());
		}
		return st.nextToken();
	}
	static int nextInt() throws IOException {
		return Integer.parseInt(next());
	}
	static String readLine() throws IOException {
		return br.readLine().trim();
	}
	static long nextLong() throws IOException {
		return Long.parseLong(next());
	}
}
