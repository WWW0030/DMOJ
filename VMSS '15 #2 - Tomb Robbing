import java.io.*;
import java.util.*;

public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	public static void main(String[] args) throws IOException {
		st = new StringTokenizer(br.readLine());
		int x = nextInt();
		int y = nextInt();
		boolean[][] list = new boolean[x][y];
		for (int a=0; a<x; a++) {
			String s = next();
			for (int b=0; b<y; b++) {
				if (s.charAt(b)=='.') {
					list[a][b] = true;
				}
			}
		}
		boolean[][] visited = new boolean[x][y];
		int count = 0;
		for (int a=0; a<x; a++) {
			for (int b=0; b<y; b++) {
				if(list[a][b]&&!visited[a][b]) {
					count++;
					visited = surrounding(a, b, x, y, visited, list);
				}
			}
		}
		System.out.println(count);
	}
	static String next() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
		st = new StringTokenizer(br.readLine());
		}
		return st.nextToken();
	}
	static int nextInt() throws IOException {
		return Integer.parseInt(next());
	}
	static String readLine() throws IOException {
		return br.readLine().trim();
	}
	static long nextLong() throws IOException {
		return Long.parseLong(next());
	}
	static boolean[][] surrounding (int x, int y, int a, int b, boolean[][] visited, boolean[][] list) {
		visited[x][y] = true;
		if (x-1>=0&&list[x-1][y]&&!visited[x-1][y]) {
			visited = surrounding(x-1, y, a, b, visited, list);
		}
		if (y+1<=b-1&&list[x][y+1]&&!visited[x][y+1]) {
			visited = surrounding(x, y+1, a, b, visited, list);
		}
		if (x+1<=a-1&&list[x+1][y]&&!visited[x+1][y]) {
			visited = surrounding(x+1, y, a, b, visited, list);
		}
		if (y-1>=0&&list[x][y-1]&&!visited[x][y-1]) {
			visited = surrounding(x, y-1, a, b, visited, list);
		}
		return visited;
	}
}
